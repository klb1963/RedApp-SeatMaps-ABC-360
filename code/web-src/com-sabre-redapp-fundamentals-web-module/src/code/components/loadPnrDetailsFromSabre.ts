// —Ñ–∞–π–ª: code/components/loadPnrDetailsFromSabre.ts

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ (PNR) –∏–∑ Sabre.
 * 
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç SOAP API –∑–∞–ø—Ä–æ—Å GetReservationRQ.
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π Record Locator, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∏ –ø–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É PnrData.
 * 
 * @param onDataLoaded –ö–æ–ª–±—ç–∫, –≤—ã–∑—ã–≤–∞–µ–º—ã–π –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö PNR.
 */

import { getService } from '../Context';
import { ISoapApiService } from 'sabre-ngv-communication/interfaces/ISoapApiService';
import { PnrPublicService } from 'sabre-ngv-app/app/services/impl/PnrPublicService';
import { parsePnrData, PnrData } from '../utils/parcePnrData';

export const loadPnrDetailsFromSabre = async (onDataLoaded: (data: PnrData) => void): Promise<void> => {
    try {
        const pnrService = getService(PnrPublicService);
        const soapApiService = getService(ISoapApiService);

        const recordLocator = pnrService.getRecordLocator();

        if (!recordLocator) {
            console.warn('No active PNR. Please create or retrieve a PNR first.');
            return;
        }

        console.log('Record Locator:', recordLocator);

        const soapPayload = `
            <ns6:GetReservationRQ xmlns:ns6="http://webservices.sabre.com/pnrbuilder/v1_19" Version="1.19.22">
                <ns6:RequestType>Stateful</ns6:RequestType>
                <ns6:ReturnOptions xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="ns6:ReturnOptions" UnmaskCreditCard="false" ShowTicketStatus="true">
                    <ns6:ViewName>Full</ns6:ViewName>
                    <ns6:ResponseFormat>STL</ns6:ResponseFormat>
                </ns6:ReturnOptions>
            </ns6:GetReservationRQ>
        `;

        const response = await soapApiService.callSws({
            action: 'GetReservationRQ',
            payload: soapPayload,
            authTokenType: 'SESSION'
        });

        console.log('GetReservationRQ Response:', response);

        const parsedData = parsePnrData(response.getParsedValue());

        console.log('üß© Parsed PNR Data:', JSON.stringify(parsedData, null, 2));
        console.log('Segments:', parsedData.segments);

        // –í–æ—Ç –∑–¥–µ—Å—å –≤—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–±—ç–∫, –ø–µ—Ä–µ–¥–∞–≤–∞—è –¥–∞–Ω–Ω—ã–µ!
        onDataLoaded(parsedData);

    } catch (error) {
        console.error('Error calling GetReservationRQ via ISoapApiService:', error);
    }
};