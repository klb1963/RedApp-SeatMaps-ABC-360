import * as React from 'react';
import * as ReactDOM from 'react-dom';
import { AbstractView } from 'sabre-ngv-app/app/AbstractView';
import { AbstractModel } from 'sabre-ngv-app/app/AbstractModel';
import { FlightSegment } from 'sabre-ngv-app/app/common/data/flight/FlightSegment';
import SeatMapComponentShopping from '../SeatMapComponentShopping';
import { quicketConfig } from '../../utils/quicketConfig';
import { CssClass } from 'sabre-ngv-core/decorators/classes/view/CssClass';
import { Template } from 'sabre-ngv-core/decorators/classes/view/Template';

@CssClass('com-sabre-redapp-example3-web-customworkflow-web-module')
@Template('com-sabre-redapp-example3-web-customworkflow-web-module:ShoppingTileView')
export class SeatMapShoppingView extends AbstractView<AbstractModel> {
    private currentSegment: FlightSegment | null = null;
    private flightSegments: any[] = [];
    private selectedSegmentIndex: number = 0;

    selfDrawerContextModelPropagated(cpa: FlightSegment): void {
        console.log('üìå [SeatMapShoppingView] selfDrawerContextModelPropagated called with cpa:', cpa);

        this.currentSegment = cpa;
        this.updateFlightSegmentsFromSegment(cpa);
        this.tryRenderReactComponent();
    }

    private updateFlightSegmentsFromSegment(segment: FlightSegment): void {
        const segments = segment.getShoppingItinerary().getFlightSegments();
    
        const aircraftTypes: Record<string, string> = {
            '359': 'Airbus A350-900',
            '388': 'Airbus A380-800',
            '77W': 'Boeing 777-300ER',
            '320': 'Airbus A320',
            '321': 'Airbus A321',
            '738': 'Boeing 737-800',
            '787': 'Boeing 787 Dreamliner'
        };
    
        this.flightSegments = segments.map(s => {
            const departureDateTime = s.getDepartureDate();
            const equipmentCode = s.getEquipmentCode?.() || 'UNKNOWN';
            const equipmentDescription = aircraftTypes[equipmentCode] || 'Not Available';
    
            return {
                id: s.getSegmentId(),
                segmentId: s.getSegmentId(),
                flightNumber: s.getFlightNumber(),
                origin: s.getOriginIata(),
                destination: s.getDestinationIata(),
                airMiles: s.getAirMiles(),
                departureDateTime: departureDateTime ? departureDateTime.toISOString().split('T')[0] : 'UNKNOWN',
                marketingAirline: s.getMarketingAirline(),
                cabinClass: 'A',
                aircraft: {
                    code: equipmentCode,
                    description: equipmentDescription
                }
            };
        });
    }

    tryRenderReactComponent(attempts = 0) {
        const MAX_ATTEMPTS = 10;
        const INTERVAL = 500;
        const rootElement = document.getElementById('seatmap-root');

        if (rootElement) {
            console.log('‚úÖ [SeatMapShoppingView] –≠–ª–µ–º–µ–Ω—Ç seatmap-root –Ω–∞–π–¥–µ–Ω. –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞.');
            this.renderReactComponent();
        } else if (attempts < MAX_ATTEMPTS) {
            console.warn(`‚ö†Ô∏è [SeatMapShoppingView] –≠–ª–µ–º–µ–Ω—Ç seatmap-root –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ ${INTERVAL} –º—Å. –ü–æ–ø—ã—Ç–∫–∞ ${attempts + 1}/${MAX_ATTEMPTS}`);
            setTimeout(() => this.tryRenderReactComponent(attempts + 1), INTERVAL);
        } else {
            console.error('‚ùå [SeatMapShoppingView] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç seatmap-root –ø–æ—Å–ª–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞ –ø–æ–ø—ã—Ç–æ–∫.');
        }
    }

    renderReactComponent() {
        if (!this.currentSegment) {
            console.warn('‚ö†Ô∏è –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞. React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ –±—É–¥–µ—Ç –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω.');
            return;
        }
    
        if (!this.flightSegments?.length) {
            console.warn('‚ö†Ô∏è flightSegments –ø—É—Å—Ç. –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞.');
            this.updateFlightSegmentsFromSegment(this.currentSegment);
        }
    
        let rootElement = document.getElementById('seatmap-root');
    
        if (rootElement) {
            ReactDOM.unmountComponentAtNode(rootElement);
            rootElement.innerHTML = '';
        } else {
            rootElement = document.createElement('div');
            rootElement.id = 'seatmap-root';
            document.body.appendChild(rootElement);
        }
    
        const data = {
            flightSegments: this.flightSegments,
            selectedSegmentIndex: this.selectedSegmentIndex
        };
    
        // üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º flightSegments –≤ sessionStorage –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Pricing
        try {
            window.sessionStorage.setItem('flightSegmentsForPricing', JSON.stringify(this.flightSegments));
            console.log('üíæ [SeatMapShoppingView] –°–µ–≥–º–µ–Ω—Ç—ã –º–∞—Ä—à—Ä—É—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ sessionStorage:', this.flightSegments);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ sessionStorage:', error);
        }
    
        ReactDOM.render(
            React.createElement(SeatMapComponentShopping, { config: quicketConfig, data }),
            rootElement
        );
    
        console.log('üìå [SeatMapShoppingView] React Component —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω –≤ #seatmap-root.');
    }
}
