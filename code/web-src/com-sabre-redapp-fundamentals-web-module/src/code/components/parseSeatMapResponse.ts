// —Ñ–∞–π–ª code/components/parseSeatMapResponse.ts

/**
 * –ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç –æ—Ç EnhancedSeatMapRS –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞—Ä—Ç—ã —Å–∞–ª–æ–Ω–∞.
 */

export interface ParsedSeatMap {
    layout: any;
    availability: any;
    passengers: any;
}

export function parseSeatMapResponse(xmlDocument: Document): ParsedSeatMap {
    console.log('üì• –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–∑–±–æ—Ä –æ—Ç–≤–µ—Ç–∞ EnhancedSeatMapRS');

    const layout = {
        decks: [],
    };
    const availability = [];
    const passengers = [];

    // 1. –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫–∞–±–∏–Ω—ã (Cabin)
    const cabinNodes = xmlDocument.getElementsByTagName('Cabin');

    for (let i = 0; i < cabinNodes.length; i++) {
        const cabinNode = cabinNodes[i];
        const rows = [];

        const rowNodes = cabinNode.getElementsByTagName('Row');

        for (let j = 0; j < rowNodes.length; j++) {
            const rowNode = rowNodes[j];
            const rowLabel = rowNode.getAttribute('number') || (j + 1).toString();

            const seatNodes = rowNode.getElementsByTagName('Seat');
            const seats = [];

            for (let k = 0; k < seatNodes.length; k++) {
                const seatNode = seatNodes[k];
                const seatLabel = seatNode.getAttribute('number') || '';
                const x = 50 + k * 50; // –ü—Ä–æ—Å—Ç–µ–π—à–µ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ X
                const y = 50 + j * 50; // –ü—Ä–æ—Å—Ç–µ–π—à–µ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ Y

                seats.push({ label: seatLabel, x, y });
            }

            rows.push({ label: rowLabel, seats });
        }

        layout.decks.push({
            id: `deck-${i}`,
            name: `Deck ${i + 1}`,
            width: 600,
            height: 800,
            rows,
        });
    }

    // 2. –ù–∞—Ö–æ–¥–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (Offers ‚Üí –º–µ—Å—Ç–∞, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏)
    const offerNodes = xmlDocument.getElementsByTagName('Offer');

    for (let i = 0; i < offerNodes.length; i++) {
        const offerNode = offerNodes[i];

        const seatNumber = offerNode.getAttribute('seatNumber');
        const priceNode = offerNode.querySelector('Price > TotalAmount');
        const price = priceNode?.textContent || '0';
        const currency = priceNode?.getAttribute('currencyCode') || 'USD';

        availability.push({
            label: seatNumber,
            price: parseFloat(price),
            currency,
        });
    }

    // 3. –ü–∞—Å—Å–∞–∂–∏—Ä—ã (—É–ø—Ä–æ—â—ë–Ω–Ω–æ, –º–æ–∂–Ω–æ –ø–æ–∑–∂–µ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å)
    passengers.push({ id: 'PAX1', name: 'Passenger 1', type: 'ADT' });

    console.log('‚úÖ –†–∞–∑–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', { layout, availability, passengers });

    return { layout, availability, passengers };
}