"use strict";var __extends=this&&this.__extends||function(){var e=function(t,a){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var a in t)t.hasOwnProperty(a)&&(e[a]=t[a])})(t,a)};return function(t,a){function __(){this.constructor=t}e(t,a),t.prototype=null===a?Object.create(a):(__.prototype=a.prototype,new __)}}();Object.defineProperty(exports,"__esModule",{value:!0});var React=require("react"),react_bootstrap_1=require("react-bootstrap"),Context_1=require("./Context"),LayerService_1=require("sabre-ngv-core/services/LayerService"),ISoapApiService_1=require("sabre-ngv-communication/interfaces/ISoapApiService"),PnrPublicService_1=require("sabre-ngv-app/app/services/impl/PnrPublicService"),CreatePNR=function(e){function CreatePNR(t){var a=e.call(this,t)||this;return a.handleChange=a.handleChange.bind(a),a.executeService=a.executeService.bind(a),a.closeAndRefresh=a.closeAndRefresh.bind(a),a.goBack=a.goBack.bind(a),a.goNext=a.goNext.bind(a),a.state={stage:1,traveler:{name:"",surname:"",typeCode:"ADT"},validation:{txtName:{isValid:!1,status:null,helpMsg:null},txtSurname:{isValid:!1,status:null,helpMsg:null},txtEmail:{isValid:!1,status:null,helpMsg:null}}},a}return __extends(CreatePNR,e),CreatePNR.prototype.handleChange=function(e){var t=e.target.id,a=e.target.value,r=this.state.validation,l=this.state.traveler,o=this.state.travelType;if(console.log("handleChange",t,a),"txtName"===t||"txtSurname"===t){var n=r[t],c=a.length;"txtName"===t&&(l.name=a),"txtSurname"===t&&(l.surname=a),c<=0?(n.isValid=!1,n.status="error",n.helpMsg="required field"):c<=1?(n.isValid=!1,n.status="warning",n.helpMsg="must be more than one character long"):c>1&&(n.isValid=!0,n.status="success",n.helpMsg=null)}"selAgeCode"===t&&(l.typeCode=a),"selTravelType"===t&&(o=a),this.setState({traveler:l,travelType:o,validation:r})},CreatePNR.prototype.goNext=function(e){var t=this.state.stage;this.setState({stage:t+1})},CreatePNR.prototype.goBack=function(e){this.setState({stage:1})},CreatePNR.prototype.executeService=function(){var e=this,t=Context_1.getService(ISoapApiService_1.ISoapApiService),a='\n        <UpdateReservationRQ Version="1.19.8" xmlns="http://webservices.sabre.com/pnrbuilder/v1_19">\n        <RequestType commitTransaction="false" initialIgnore="true">Stateful</RequestType>\n        <ReturnOptions IncludeUpdateDetails="true" RetrievePNR="false"/>\n            <ReservationUpdateList>\n                <ReservationUpdateItem>\n                    <PassengerNameUpdate op="C">\n                        <TravelerName type="'+this.state.traveler.typeCode+'">\n                            <Given>'+this.state.traveler.name+"</Given>\n                            <Surname>"+this.state.traveler.surname+'</Surname>\n                        </TravelerName>\n                    </PassengerNameUpdate>\n                </ReservationUpdateItem>\n                <ReservationUpdateItem>\n                    <RemarkUpdate op="C">\n                        <RemarkText>THIS IS '+this.state.travelType+" TRAVEL TYPE REMARK</RemarkText>\n                    </RemarkUpdate>\n                </ReservationUpdateItem>\n            </ReservationUpdateList>\n        </UpdateReservationRQ>\n        ";t.callSws({action:"UpdateReservationRQ",payload:a,authTokenType:"SESSION"}).then(function(t){console.log("Soap API call result",JSON.stringify(t)),t.errorCode||t.value&&t.value.indexOf("<stl19:Error")>=0?e.setState({stage:4}):e.setState({stage:3})}).catch(function(t){console.log("Soap API call error",t),e.setState({stage:4})})},CreatePNR.prototype.handleModalClose=function(){Context_1.getService(LayerService_1.LayerService).clearLayer(42)},CreatePNR.prototype.closeAndRefresh=function(){Context_1.getService(PnrPublicService_1.PnrPublicService).refreshData(),this.handleModalClose()},CreatePNR.prototype.render=function(){var e=this;switch(this.state.stage){case 1:var t=this.state.validation.txtName,a=this.state.validation.txtSurname;return React.createElement(react_bootstrap_1.Modal.Dialog,{className:"react-modal"},React.createElement(react_bootstrap_1.Modal.Header,{closeButton:!0,onHide:function(){e.handleModalClose()}},React.createElement(react_bootstrap_1.Modal.Title,null,"Data Entry Form (1 of 2)")),React.createElement(react_bootstrap_1.Modal.Body,null,React.createElement(react_bootstrap_1.Form,{autoComplete:"off"},React.createElement(react_bootstrap_1.Panel,null,React.createElement(react_bootstrap_1.Panel.Heading,null,React.createElement(react_bootstrap_1.Panel.Title,null,"About Traveler")),React.createElement(react_bootstrap_1.Panel.Body,null,React.createElement(react_bootstrap_1.FormGroup,{controlId:"txtName",validationState:t.status},React.createElement(react_bootstrap_1.ControlLabel,null,"Name"),React.createElement(react_bootstrap_1.FormControl,{type:"text",placeholder:"Enter traveler Name",value:this.state.traveler.name,onChange:this.handleChange}),t.helpMsg&&React.createElement(react_bootstrap_1.FormControl.Feedback,null),t.helpMsg&&React.createElement(react_bootstrap_1.HelpBlock,null,t.helpMsg)),React.createElement(react_bootstrap_1.FormGroup,{controlId:"txtSurname",validationState:a.status},React.createElement(react_bootstrap_1.ControlLabel,null,"Surname"),React.createElement(react_bootstrap_1.FormControl,{type:"text",placeholder:"Enter traveler Surame",value:this.state.traveler.surname,onChange:this.handleChange}),a.isValid&&React.createElement(react_bootstrap_1.FormControl.Feedback,null),a.isValid&&a.helpMsg&&React.createElement(react_bootstrap_1.HelpBlock,null,t.helpMsg)),React.createElement(react_bootstrap_1.FormGroup,{controlId:"selAgeCode"},React.createElement(react_bootstrap_1.ControlLabel,null,"Passenger Type (Code)"),React.createElement(react_bootstrap_1.FormControl,{componentClass:"select",placeholder:"select",value:this.state.traveler.typeCode,onChange:this.handleChange},React.createElement("option",{value:"select"},"select"),React.createElement("option",{value:"ADT"},"Adult"),React.createElement("option",{value:"CNN"},"Child"),React.createElement("option",{value:"INF"},"Infant"))))))),React.createElement(react_bootstrap_1.Modal.Footer,null,React.createElement(react_bootstrap_1.Button,{onClick:this.handleModalClose,className:"btn btn-secondary"},"Cancel"),React.createElement(react_bootstrap_1.Button,{className:"btn btn-primary",onClick:this.goNext},"Next")));case 2:return React.createElement(react_bootstrap_1.Modal.Dialog,{className:"react-modal"},React.createElement(react_bootstrap_1.Modal.Header,{closeButton:!0,onHide:function(){e.handleModalClose()}},React.createElement(react_bootstrap_1.Modal.Title,null,"Data Entry Form (2 of 2)")),React.createElement(react_bootstrap_1.Modal.Body,null,React.createElement(react_bootstrap_1.Form,null,React.createElement(react_bootstrap_1.Panel,null,React.createElement(react_bootstrap_1.Panel.Heading,null,React.createElement(react_bootstrap_1.Panel.Title,null,"About Travel")),React.createElement(react_bootstrap_1.Panel.Body,null,React.createElement(react_bootstrap_1.FormGroup,{controlId:"selTravelType"},React.createElement(react_bootstrap_1.ControlLabel,null,"Travel Type"),React.createElement(react_bootstrap_1.FormControl,{componentClass:"select",placeholder:"select",onChange:this.handleChange,value:this.state.travelType},React.createElement("option",{value:"select"},"select"),React.createElement("option",{value:"business"},"business"),React.createElement("option",{value:"leisure"},"leisure"))),"business"===this.state.travelType&&React.createElement(react_bootstrap_1.FormGroup,null,React.createElement(react_bootstrap_1.ControlLabel,null,"Add Corporate ID ?"),React.createElement(react_bootstrap_1.InputGroup,null,React.createElement(react_bootstrap_1.InputGroup.Addon,null,React.createElement("input",{type:"checkbox","aria-label":"..."})),React.createElement(react_bootstrap_1.FormControl,{type:"text"}))),"leisure"===this.state.travelType&&React.createElement(react_bootstrap_1.FormGroup,null,React.createElement(react_bootstrap_1.ControlLabel,null,"Add Special Service Request ?"),React.createElement(react_bootstrap_1.InputGroup,null,React.createElement(react_bootstrap_1.InputGroup.Addon,null,React.createElement("input",{type:"checkbox","aria-label":"..."})),React.createElement(react_bootstrap_1.FormControl,{type:"text"}))))))),React.createElement(react_bootstrap_1.Modal.Footer,null,React.createElement(react_bootstrap_1.Button,{onClick:this.handleModalClose,className:"btn btn-secondary"},"Cancel"),React.createElement(react_bootstrap_1.Button,{className:"btn btn-primary",onClick:this.goBack},"Back"),React.createElement(react_bootstrap_1.Button,{className:"btn btn-primary btn-success",onClick:this.executeService},"Create PNR")));case 3:return React.createElement(react_bootstrap_1.Alert,{bsStyle:"success",onDismiss:this.closeAndRefresh},React.createElement("h4",null,"Success"),React.createElement("hr",null),React.createElement("p",null,"Operation completed sucessfully, data was written to the PNR, session status will be refreshed..."),React.createElement("hr",null),React.createElement("p",null,React.createElement(react_bootstrap_1.Button,{bsStyle:"success",onClick:this.closeAndRefresh},"Close")));case 4:return React.createElement(react_bootstrap_1.Alert,{bsStyle:"danger",onDismiss:this.handleModalClose},React.createElement("h4",null,"Error"),React.createElement("hr",null),React.createElement("p",null,"The operation could not be completed, validate records and try again..."),React.createElement("hr",null),React.createElement("p",null,React.createElement(react_bootstrap_1.Button,{bsStyle:"danger",onClick:this.goBack},"Retry"),React.createElement(react_bootstrap_1.Button,{onClick:this.handleModalClose},"Cancel")))}},CreatePNR}(React.Component);exports.CreatePNR=CreatePNR;
//# sourceMappingURL=data:application/json;charset=utf-8;base64, 